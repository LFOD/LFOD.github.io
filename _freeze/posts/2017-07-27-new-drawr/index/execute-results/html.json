{
  "hash": "79478a889403dd0d01c58128c40e6d39",
  "result": {
    "markdown": "---\ntitle: \"New and improved draw charts in shinysense\"\nauthor: \"Nick Strayer\"\ndate: '2017-07-27'\ndraft: true\nexecute: \n  eval: false\ncategories: [\"shinysense\", \"shiny\", \"rmarkdown\", \"javascript\", \"rstats\"]\ntags: [\"shinysense\", \"shiny\", \"rmarkdown\", \"javascript\", \"rstats\"]\ndescription: \"Recently I overhauled the drawr function of my package shinysense. Some bugs were fixed but potentially more interesting new features were added. Among these are support for time series and the ability to use the function outside of Shiny. This post covers what changed and how to use the new features.\"\n---\n\n\n\n\n## Background\n\nI didn't expect many people to use the you-draw-it charts (henceforth referred to as 'drawrs') I put into my shiny modules package [`shinysense`](https://www.github.com/nstrayer/shinysense) but a decent number did, and with that usage came... bugs.  \n\nIn an effort to fix the bugs I went back and tore the function down and re-wrote it entirely. This time I utilized the javascript and R development knowledge I gained from building it the first time 'round. Most importantly, in the javascript portion of the code, <label for=\"tufte-mn-\" class=\"margin-toggle\">&#8853;</label><input type=\"checkbox\" id=\"tufte-mn-\" class=\"margin-toggle\"><span class=\"marginnote\">The javascript is actually it's own library on NPM.</span> I implemented unit tests for every function. Something non-trivial due to needing to run the code in a headless browser to simulate dom manipulation. (Javascripty post on this coming soon). \n\n\n## Changes\n\nThe main API for the shiny module `shinydrawr` and `shinydrawrUI` has remained unchanged. You can simply update to the newest version of the package and everything (should) <label for=\"tufte-mn-\" class=\"margin-toggle\">&#8853;</label><input type=\"checkbox\" id=\"tufte-mn-\" class=\"margin-toggle\"><span class=\"marginnote\">[Submit an issue](https://github.com/nstrayer/shinysense/issues) if it doesnt</span> work exactly the same. That being said, there are a few improvements that either improve previous results or add on new features:\n\n__Resizing:__ The visualization now will re-size as your window changes. Start your shiny app small and then full screen it? Now the plot will grow with it. \n\n![](../../media/images/resizing.gif)\n\n__Multiple drawrs:__ You should always expect people to use your functions in ways you yourself never envisioned. A perfect example of this was the awesome [Lousiville Crime Rates](https://rkahne.shinyapps.io/louisville_crime_rates/) project done by [Robert Kahne](https://twitter.com/rkahne). \n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Sometimes the app loads with all the graphs already filled in, other times it doesn&#39;t.  It&#39;s okay though, I hope you find the data useful.</p>&mdash; Robert Kahne (@rkahne) <a href=\"https://twitter.com/rkahne/status/879717378027921408\">June 27, 2017</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nTurns out the way I originally coded `shinydrawr` <label for=\"tufte-mn-\" class=\"margin-toggle\">&#8853;</label><input type=\"checkbox\" id=\"tufte-mn-\" class=\"margin-toggle\"><span class=\"marginnote\">The reveal portion of the code used a css clipping filter that was tied to a fixed css id and thus every other drawr tried to use the filter from the first plot.</span>assumed there would only ever be a single drawr on the screen at once but people wanted more. Now you can create as many drawrs as your heart desires.\n\n__Time series support:__ It is kind of silly that the function didn't support time series before, these visualizations are almost exclusively used with time on the x-axis so obviously that should be supported. <label for=\"tufte-mn-\" class=\"margin-toggle\">&#8853;</label><input type=\"checkbox\" id=\"tufte-mn-\" class=\"margin-toggle\"><span class=\"marginnote\">Stick around for a demo.</span>\n\n__Non-Shiny use:__ I took advantage of the wonderful work done by the creators and maintainers of the package [`htmlwidgets`](http://www.htmlwidgets.org/) and wrapped the javascript visualization in a widget. This means that you can now use the function `drawr_widget` right inside of RStudio, RMarkdown, or even a shiny app (if you don't care about the data the user draws). Here's an example of how to do that along with some demonstrations of the new features. \n\n## Widget\n\n### Basic Usage\n\nYou can use the widget just like the old `shinydrawr` worked. Throw in your data, name a start point and you get a 'you draw it' style chart just like the now famous [article](https://www.nytimes.com/interactive/2017/01/15/us/politics/you-draw-obama-legacy.html) from the New York Times. \n\n\n\n::: {.cell warnings='false'}\n\n```{.r .cell-code}\n#run this line if you need to install the package. \n#devtools::install_github('nstrayer/shinysense') \nlibrary(tidyverse)\nlibrary(shinysense) \n\nrandom_data <- tibble(time = 1:30,\n                      metric = time * sin(time / 6) + rnorm(30))\n  \ndrawr(\n  data = random_data,\n  #draw_start = 15,\n  x_col = time,\n  y_col = metric\n)\n```\n:::\n\n\n\n### Time Series\n\nTime series are supported and have intelligently labeled axes. (Thanks to `d3.scaleTime()`s wonderful defaults.) To make a drawr with a time axis you simply need to pass data in with the x column having the class `Date` (or at least inheriting properties of `Date`). The function will detect this and plot accordingly. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndates <- seq(as.Date(\"2017/1/1\"), as.Date(\"2017/07/22\"), \"weeks\")\nnumWeeks <- length(dates)\nendDate <- dates[15]\n\ntimeData <- data_frame(\n  date = dates,\n  value = 50 + (1:numWeeks) * cos((1:numWeeks) / 6) + rnorm(numWeeks)\n)\n  \ndrawr_widget(\n  data = timeData,\n  draw_start = endDate,\n  x_key = \"date\",\n  y_key = \"value\",\n  width=\"100%\"\n)\n```\n:::\n\n\n\n### No Reveal\n\nSay you want to plot a drawr with some data that you desire the user to draw their predictions for, but not have the plot reveal the rest of the data (for instance, if it's not available). To do this you simply append to the end of the dataframe rows with `NA`s in the y column. The chart will then allow the user to draw, pinning the drawn results y value's to the supplied corresponding x-values. This doesn't make much sense for the widget version we're showing here, but in a shiny app with the drawn values returned to the app it can be used for any number of things. <label for=\"tufte-mn-\" class=\"margin-toggle\">&#8853;</label><input type=\"checkbox\" id=\"tufte-mn-\" class=\"margin-toggle\"><span class=\"marginnote\">Feature was developed to gather future predictions from domain experts.</span>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntimeDataNoReveal <- timeData %>% \n  mutate(\n    value = ifelse(date > endDate, NA, value)\n  )\n  \ndrawr_widget(\n  data = timeDataNoReveal,\n  draw_start = endDate,\n  x_key = \"date\",\n  y_key = \"value\",\n  y_min = 2,\n  width=\"100%\"\n)\n```\n:::\n\n\n\n### Free Drawing\n\nWhile it's not a new feature and is almost pointless outside of shiny, you can still do draw on a canvas with no plotted line: simply set `raw_draw = TRUE` and go to town. <label for=\"tufte-mn-\" class=\"margin-toggle\">&#8853;</label><input type=\"checkbox\" id=\"tufte-mn-\" class=\"margin-toggle\"><span class=\"marginnote\">You could also do this by simply setting all your y-values to NA, your choice.</span>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrawr_widget(\n  data = timeDataNoReveal,\n  draw_start = endDate,\n  raw_draw = TRUE,\n  x_key = \"date\",\n  y_key = \"value\",\n  y_min = 2,\n  width=\"100%\"\n)\n```\n:::\n\n\n## Next Steps\n\nObviously I didn't fix all the bugs and most likely created more than I remedied. If you find any it would make me very happy if you'd [submit an issue](https://github.com/nstrayer/shinysense/issues) on the github page. In addition, if there is a feature that you'd like and isn't implemented, also submit an issue (or if you're feeling super adventurous a pull request). \n\n## Acknowledgements\n\nI am incredibly lucky to be performing all of this package development while supported by the [Johns Hopkins Data Science Lab](http://jhudatascience.org/). In particular [John Muschelli](https://twitter.com/StrictlyStat) who has provided PRs and chats about what the package should do. \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}