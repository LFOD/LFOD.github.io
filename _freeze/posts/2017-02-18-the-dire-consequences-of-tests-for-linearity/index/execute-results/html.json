{
  "hash": "4253a01aa54396bfeabb55deee06bf96",
  "result": {
    "markdown": "---\nauthor: \"Lucy D'Agostino McGowan\"\ndate: 2017-02-18T09:03:06-06:00\ncategories:\n- rstats\n- rms\n- \"type 1 error\"\n- nonlinearity\ntitle: \"The dire consequences of tests for linearity\"\ndescription: \"This is a tale of the dire (type 1 error) consequences that occur when you test for linearity üò±\"\n---\n\n\n\nThis is a tale of the dire **type 1 error** consequences that occur when you test for linearity.\n\n<a href=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/f4/The_Scream.jpg/603px-The_Scream.jpg\" target=\"_blank\">\n  <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/f4/The_Scream.jpg/603px-The_Scream.jpg\" width=50% alt=\"the scream\">\n</a>\n<p style = \"color:#EB6864; font-size: 10pt;LINE-HEIGHT:15px;\">*Edvard Munch's The Scream (1893), coincidentally also the face [Frank Harrell](https://twitter.com/f2harrell) makes when he sees students testing for linearity.*</p>\n\nFirst, my favorite explanation of **type 1 error** üê∫:\n\n<center>\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/jgschraiber\">@jgschraiber</a> <a href=\"https://twitter.com/eagereyes\">@eagereyes</a> Pro-tip that changed my life: in The Boy Who Cried Wolf, the villagers first make a Type 1, and then a Type 2 error.</p>&mdash; Sam (@geometrywarrior) <a href=\"https://twitter.com/geometrywarrior/status/781162199540719616\">September 28, 2016</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n</center>\n\nWe generally fix (or claim to fix) this **type 1 error** at 0.05, but sometimes our procedures can make this go awry!\n\nI've prepared a **very** basic simulation. \n\n* generate 100 data points from two independent random normal distributions, an outcome $y$ and a predictor $x$<span style = \"color:#EB6864\"> (Since these are generated randomly, we would **not** expect there to be an association between $x$ and $y$. If all goes as planned, our **type 1 error** would be 0.05) </span>\n* fit simple linear model with a restricted cubic spline on the predictor $x$\n* test whether the nonlinear terms are significant\n  * if they are, leave them in and test the association between $x$ and $y$\n  * if they are not, remove them and refit the model with only a linear term for $x$ & proceed to test the association between $x$ and $y$.  \n* calculate the **type 1 error**, how many times we detected a spurious significant association between $x$ and $y$.\n\nHere's my simulation code (run it yourself!):\n\n::: column-margin\nhank you Pua Yong Hao for pointing out a typo in the original version of this function -- it has been updated!\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary('rms')\n\nsim <- function(wrong = TRUE){\n#generate completely random data\ny <- rnorm(100)\nx <- rnorm(100)\n#fit a model with a restricted cubic spline\nmod <- ols(y ~ rcs(x))\n\nif (wrong == TRUE & anova(mod)[2, 5] > 0.05){\n  #if the test for non-linearity is not \"significant\", remove nonlinear terms\n  mod <- ols(y ~ x)\n} \n #save the p-value\n anova(mod)[1, 5]\n}\n```\n:::\n\n\n<center>\n\n<span style=\"color:#EB6864; font-size: 20pt\"> \n[Type 1 error when removing non-significant nonlinear terms]\n\n</span>\n\n</center>\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell hash='index_cache/html/wrong_c5c841c4a777ff37a98e3710bdaf97c7'}\n\n```{.r .cell-code}\ntest <- replicate(10000, sim()) \ncat(\"The type 1 error is\", mean(test <= 0.05))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe type 1 error is 0.0812\n```\n:::\n:::\n\n\nUh oh! That **type 1 error** is certainly higher than the nominal 0.05 we claim!\n\n<center>\n\n<span style=\"color:#EB6864; font-size: 20pt\"> [Type 1 error when not removing non-significant nonlinear terms]</span>\n\n</center>\n\nWe would expect the **type 1 error** to be 0.05 -- I perform the same simulation omitting the step of removing non-significant nonlinear terms and calculate the **type 1 error** again.\n\n\n::: {.cell hash='index_cache/html/right_62f1a99617077f972847caedaf44d378'}\n\n```{.r .cell-code}\ntest <- replicate(10000, sim(wrong = FALSE))\ncat(\"The type 1 error is\", mean(test <= 0.05))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe type 1 error is 0.0501\n```\n:::\n:::\n\nMuch better üëØ\n\nThe conclusion: [fit flexible models](http://livefreeordichotomize.com/2017/01/27/yoga-for-modeling/) - skip the tests for linearity!\n\n*This has been elegently demonstrated by others, check out [Grambsch and O'Brien](http://onlinelibrary.wiley.com/doi/10.1002/sim.4780100504/full).*\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}