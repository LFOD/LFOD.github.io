{
  "hash": "e319f748cafce23c2a4b3366af79e7f2",
  "result": {
    "markdown": "---\ntitle: \"When is complete case analysis unbiased?\"\nauthor: Lucy D'Agostino McGowan\ndate: '2023-04-28'\ncategories: [\"rstats\", \"simulations\", \"missing data\"]\ndescription: \"I have been thinking about scenarios under which it makes sense to use imputation for prediction models and am struggling to come up with a case. Yikes! Even for inference, as long as you do some doubly robust approach, I'm not sure I see the value (other than for precision, but then is no longer a question of bias and thus is a question for a different day!)\"\n---\n\n::: {.cell}\n\n:::\n\n\nHere is the scenario: You are trying to predict some outcome, $y$, and some of your predictors have missing data. Will doing a complete case analysis give you unbiased results? What additional information do you need before deciding? \n\nFor some reason, when I tried to answer this question, my first instinct was to try to decide whether the data were *missing at random*, but it turns out, this might not  be the right first question! Why? Complete case analysis will give us unbiased estimates **even if the data are not missing at random**. Excuse me? Yes. When is this the case? When:\n\n(1) The missingness is not dependent on the outcome (this one seems like it *should* hold if we are using proper predictors, since in order to predict y they should precede y, making the value of y unable to determine their missingness, (I think!)). \n(2) You have correctly specified your model\n(3) Your outcome doesn't have any missing data (this is more extreme than the actual assumption needed, but if there is no missing outcome data then you should definitely be ok, see below for the nuance)\n\nWhen I was thinking through this, I found it helped to work up a few short simulations, so here we go.\n\n## Scenario 1: I have a predictor that is missing not at random\n\nFirst let's generate our \"true\" values. Here the true model is below, which shows that:\n\n$y =  x + \\varepsilon$\n\nIn other words, $\\beta_0: 0$ and $\\beta_1: 1$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nn <- 1000000\n\nset.seed(1)\ndata <- tibble(\n  x = rnorm(n),\n  c = rnorm(n),\n  y = x + rnorm(n)\n)\n```\n:::\n\n\nLet's force `x` to be missing under three scenarios:\n\n* Missing completely at random\n* Missing conditionally at random (based on `c`)\n* Missing not at random\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data |>\n  mutate(\n    x_obs_mcar = ifelse(\n      rbinom(n, 1, 0.5), \n      NA, \n      x\n    ),\n    x_obs_mar = ifelse(\n      rbinom(n, 1, 1 / (1 + exp(-c))),\n      NA,\n      x\n    ),\n    x_obs_mnar = ifelse(\n      rbinom(n, 1, 1 / (1 + exp(-x))),\n      NA,\n      x\n    )\n  )\n\ndata |>\n  summarise(mcar_miss = mean(is.na(x_obs_mcar)),\n        mar_miss = mean(is.na(x_obs_mar)),\n        mnar_miss = mean(is.na(x_obs_mnar)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  mcar_miss mar_miss mnar_miss\n      <dbl>    <dbl>     <dbl>\n1     0.501    0.500     0.501\n```\n\n\n:::\n:::\n\n\nIn all three cases ~50% of the data are missing.\n\nLet's see how these impact the ability to predict `y` (and the estimation of $\\hat\\beta$)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm(y ~ x_obs_mcar, data = data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = y ~ x_obs_mcar, data = data)\n\nCoefficients:\n(Intercept)   x_obs_mcar  \n   -0.00104      0.99964  \n```\n\n\n:::\n:::\n\nOk, the missing completely at random `x` is estimated correctly when we do a complete cases analysis (that is when we list-wise delete every row that has missing data). This checks out!\n\nLet's check out the missing conditionally at random `x`. Note that this is missing at random after conditioning on `c` (although we aren't actually doing anything with `c` at this point, so it might as well be missing not at random...)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm(y ~ x_obs_mar, data = data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = y ~ x_obs_mar, data = data)\n\nCoefficients:\n(Intercept)    x_obs_mar  \n  -0.000482     0.999835  \n```\n\n\n:::\n:::\n\nWhoa! Prediction is still correct and the coefficients themselves are still unbiased even if we do complete case analysis.\n\nOk, what about missing not at random?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm(y ~ x_obs_mnar, data = data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = y ~ x_obs_mnar, data = data)\n\nCoefficients:\n(Intercept)   x_obs_mnar  \n  -7.23e-05     9.99e-01  \n```\n\n\n:::\n:::\n\nStill ok! No bias in the coefficients and the predicted values are unbiased even though the predictor was missing **not** at random (and we did a complete cases analysis).\n\nWhy is this the case? Travis Gerke pointed out [this excellent paper](https://researchonline.lshtm.ac.uk/id/eprint/1198/1/research_online_1198.pdf) that has a beautiful plot that demonstrates why this happens. I am going to simulate some smaller data than what I have above to demonstrate the point. Here, the missingess is deterministic (and definitely not random!) -- if `x` is greater than 0, it is missing, otherwise it isn't. Again, this renders ~50% of our data missing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- tibble(\n  x = seq(-3, 3, by = 0.1),\n  y = x + rnorm(61),\n  x_miss = ifelse(x > 0, \"yes\", \"no\")\n)\n\nggplot(data, aes(x = x, y = y, color = x_miss)) +\n  geom_point() + \n  geom_line(aes(x = x, y = predict(lm(y ~ x, data = data)))) +\n  geom_vline(xintercept = 0, lty = 2) + \n  scale_color_manual(values = c(\"cornflowerblue\", \"orange\")) +\n  geom_label(aes(x = -2, y = 3), label = \"observed data\", color = \"cornflowerblue\") + \n  geom_label(aes(x = 2, y = -3), label = \"missing data\") + \n  theme_minimal() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nMaybe this result is a somewhat obvious result because despite the fact that the missingness was not at random, it had nothing to do with the outcome, `y`, let's see what would happen if `c` was related to `y`.\n\n\n## Scenario 2: I have missing data that is missing due to some factor (and other things, so still not MAR)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\ndata <- tibble(\n  x = rnorm(n),\n  c = rnorm(n),\n  y = x + c + rnorm(n)\n)\n```\n:::\n\n\nLet's say we have some data that is not missing at random. The probability that `x` is missing is dependent both on it's own value (MNAR!) and the value of `c`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data |>\n  mutate(x_obs =  ifelse(\n    rbinom(n, 1, 1 / (1 + exp(-(x + c)))),\n    NA,\n    x\n  )\n  )\n```\n:::\n\n  \nThis results in missing ~ 50% of the values for `x`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |>\n  count(miss_x = is.na(x_obs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  miss_x      n\n  <lgl>   <int>\n1 FALSE  499277\n2 TRUE   500723\n```\n\n\n:::\n:::\n\nSo what happens if we try to predict `y`? Let's try it first with the full data as a benchmark:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nright_mod <- lm(y ~ x + c, data = data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nright_mod\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = y ~ x + c, data = data)\n\nCoefficients:\n(Intercept)            x            c  \n  -0.000162     1.000106     0.999592  \n```\n\n\n:::\n:::\n\nBeautiful. we get the correct $\\hat\\beta$ estimates (and thus the correct predictions for `y`).\n\nNow let's take a look at the complete case analysis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_cc <- na.omit(data)\n\ncc_mod <- lm(y ~ x + c, data = data_cc)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncc_mod\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = y ~ x + c, data = data_cc)\n\nCoefficients:\n(Intercept)            x            c  \n    0.00128      1.00032      1.00156  \n```\n\n\n:::\n:::\n\n\nWould you look at that. Correct coefficients! How could we break that? If we misspecified the model, for example if we didn't adjust for `c`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm(y ~ x, data = data_cc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = y ~ x, data = data_cc)\n\nCoefficients:\n(Intercept)            x  \n     -0.419        0.849  \n```\n\n\n:::\n:::\n\nBut is this a terribly interesting case? If we don't have a way to predict the missing `x` values (MNAR!) we couldn't impute it anyways, so we would be in trouble imputation or not!\n\n## Scenario 3: What about inference?\n\nThis is the same as above, but I found it helpful to frame as an inference question. What if I have some treatment, `x` that is randomly assigned, but is missing based on some factor `c` that is related to my outcome of interest, `y`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\ndata <- tibble(\n  x = rbinom(n, 1, 0.5), # randomly assigned exposure\n  c = rnorm(n), # problem variable\n  y = x + c + rnorm(n), # true treatment effect is 1\n  x_obs = ifelse(rbinom(n, 1, 1 / (1 + exp(-(x + c)))),\n                 NA, x) # missing based on x and c\n)\n```\n:::\n\n\nFirst of all, in the absense of any missing data we don't actually need to adjust for c in order to get an unbiased estimate for `x` because `c` is not a confounder (yay!).\n\n::: {.cell}\n\n```{.r .cell-code}\nlm(y ~ x, data = data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = y ~ x, data = data)\n\nCoefficients:\n(Intercept)            x  \n   0.000368     0.998409  \n```\n\n\n:::\n:::\n\n\nBUT! With missing data, we *do* have a problem:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_cc <- na.omit(data)\nlm(y ~ x, data = data_cc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = y ~ x, data = data_cc)\n\nCoefficients:\n(Intercept)            x  \n     -0.413        0.825  \n```\n\n\n:::\n:::\n\n\nOops! Now we are seeing an effect of 0.825 when the true effect of the exposure is 1 (because we did a bad thing and just deleted all the missing rows). In the past, this is where I would say *and therefore you should do imputation!* BUT instead, just adjust for `c`, that is correctly specify your outcome model and all will be well:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm(y ~ x + c, data = data_cc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = y ~ x + c, data = data_cc)\n\nCoefficients:\n(Intercept)            x            c  \n   -0.00149      1.00241      1.00161  \n```\n\n\n:::\n:::\n\n\n### What if there is treatment heterogeneity?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\ndata <- tibble(\n  x = rbinom(n, 1, 0.5), # randomly assigned exposure\n  c = rnorm(n), # problem variable\n  y = x + c + x * c + rnorm(n), # true treatment effect varies by c\n  x_obs = ifelse(rbinom(n, 1, 1 / (1 + exp(-(x + c)))),\n                 NA, x) # missing based on x and c\n)\n```\n:::\n\n\nComplete case analysis is fine as long as the model for the outcome is correctly specified:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_cc <- na.omit(data)\nlm(y ~ x + c + x*c, data = data_cc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = y ~ x + c + x * c, data = data_cc)\n\nCoefficients:\n(Intercept)            x            c          x:c  \n   -0.00122      1.00149      1.00228      0.99824  \n```\n\n\n:::\n:::\n\n### Does the outcome model have to be perfectly specified?\n\nHere I have an additional factor `c2` that just influences `y`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\ndata <- tibble(\n  x = rbinom(n, 1, 0.5), # randomly assigned exposure\n  c = rnorm(n), # problem variable\n  c2 = rnorm(n), # some other thing that only influences y\n  y = x + c + c2 + rnorm(n), # true treatment effect varies by c\n  x_obs = ifelse(rbinom(n, 1, 1 / (1 + exp(-(x + c)))),\n                 NA, x) # missing based on x and c\n)\n```\n:::\n\n\nComplete case analysis is fine as long as the model for the outcome has the things that influence both the exposure and outcome (confounders) and the things that influence the missing data mechanism and outcome (in this case just `c`) if all we care about is the effect of `x` on `y`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_cc <- na.omit(data)\nlm(y ~ x + c, data = data_cc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = y ~ x + c, data = data_cc)\n\nCoefficients:\n(Intercept)            x            c  \n  -0.000207     1.000115     0.999957  \n```\n\n\n:::\n:::\n\n\n## Scenario 4: What if the outcome has some missing data?\n\nOk this is where things are a bit trickier (and it is not uncommon to find yourself here, for example loss to follow-up!)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- tibble(\n  x = rnorm(n),\n  c = rnorm(n),\n  y = x + c + rnorm(n),\n  x_obs = ifelse(\n    rbinom(n, 1, 1 / (1 + exp(-(x + c)))), # x is missing not at random (based on value of x and c)\n    NA,\n    x\n  ),\n  y_obs = ifelse(\n    rbinom(n, 1, 1 / (1 + exp(-(x + c)))), # y is missing (conditionally) at random\n    NA, \n    y\n  )\n)\n```\n:::\n\n\nBased on both of these missingness patterns, we are down to ~66% of our data having at least one missing value. AND YET we get unbiased results when we do complete case analysis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_cc <- na.omit(data)\nlm(y ~ x + c, data_cc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = y ~ x + c, data = data_cc)\n\nCoefficients:\n(Intercept)            x            c  \n    0.00441      1.00213      1.00114  \n```\n\n\n:::\n:::\n\n\nSO when is it a problem? If you are missing `y` and `y` is missing **not at random** then you are in trouble (*but, I will note that you would also be in trouble in this case if you wanted to do imputation, so I'm not sure this is really a case for anything other than yet another example of a case where statistics cannot save you from everything!*). Let's look at that:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- tibble(\n  x = rnorm(n),\n  c = rnorm(n),\n  y = x + c + rnorm(n),\n  x_obs = ifelse(\n    rbinom(n, 1, 1 / (1 + exp(-(x + c)))), # x is missing not at random (based on value of x and c)\n    NA,\n    x\n  ),\n  y_obs = ifelse(\n    rbinom(n, 1, 1 / (1 + exp(-(x + c + y)))), # y is missing not at random\n    NA, \n    y\n  )\n)\n```\n:::\n\n\nWomp womp, here we have a problem, when we do complete case analysis, even with the correctly specified model, we get the wrong answer:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_cc <- na.omit(data)\nlm(y ~ x + c, data_cc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = y ~ x + c, data = data_cc)\n\nCoefficients:\n(Intercept)            x            c  \n     -0.352        0.849        0.848  \n```\n\n\n:::\n:::\n\nLet's make another of those cool graphs like they did in that awesome paper explaining missing data in terms of causal inference. Now I am going to make `y` missing not at random, as opposed to `x` like above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- tibble(\n  x = seq(-3, 3, by = 0.1),\n  y = x + rnorm(61),\n  y_miss = ifelse(y > 0, \"yes\", \"no\")\n)\n\ndata_cc <- data[data$y_miss == \"no\", ]\n\nlibrary(geomtextpath)\n\nggplot(data, aes(x = x, y = y, color = y_miss)) +\n  geom_point() + \n  geom_textline(color = \"black\", \n                aes(x = x, y = predict(lm(y ~ x, data = data))), \n                label = \"truth\", hjust = 0.75) +\n  geom_textline(data = data_cc, \n                aes(x = x, y = predict(lm(y ~ x, data = data_cc))), \n                label = \"wrong\") + \n  geom_hline(yintercept = 0, lty = 2) + \n  scale_color_manual(values = c(\"cornflowerblue\", \"orange\")) +\n  geom_label(aes(x = -2, y = 3), label = \"missing data\") + \n  geom_label(aes(x = 2, y = -3), label = \"observed data\", color = \"cornflowerblue\") + \n  theme_minimal() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n## Standard errors\n\nThis post is about **bias** but I would be remiss not to mention the sacrifice in precision that complete case analyses make. It is true that complete case analysis is \"throwing away\" data, so the standard errors of these estimates will be larger than they would be had we observed the full data set. BUT these standard errors are out of the box \"correct\" (which is not true if you do something like single imputation, for example!)\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}