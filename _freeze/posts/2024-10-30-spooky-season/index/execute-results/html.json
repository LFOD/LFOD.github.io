{
  "hash": "759f1ea525e27557acaa467991a5819b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Spooky Seasons Greetings\"\nauthor: \"Lucy D'Agostino McGowan\"\ndate: \"2024-10-30\"\ncategories: [\"rstats\", \"normal\", \"paranormal\"]\ndescription: \"Let's do some paranormal plotting!\"\nexecute: \n  eval: false\n---\n\n\n\nI thought it'd be fun to celebrate spooky season with a little stats punny plot. We're going to turn a normal distribution into a *paranormal* distribution! HA!\n\nOk first let's get some packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tweenr)\nlibrary(gganimate)\n```\n:::\n\n\n\n\nNow let's generate our Normal data:\n\n::: column-margin\nWe're doing this twice in the data frame because we need to have the same number of data points as the *paranormal* data, which has a little wiggly bottom.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 100\nx_top <- seq(-1.5, 1.5, length.out = n)\ny_top <- dnorm(x_top)\n\ndata_normal <- data.frame(\n  x = c(x_top, rev(x_top)),\n  y = c(y_top, rep(0.1, n)),\n  state = \"normal\"\n)\n```\n:::\n\n\n\nCool beans. Now, for the paranormal, I want a little sine wiggle so it looks like a cute ghost! Let's make that happen.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_bottom <- seq(-1.5, 1.5, length.out = n)\ny_bottom <- -0.15 + 0.1 * sin(3 * pi * (x_bottom + 1.5)) - 0.1\n\ndata_ghost <- data.frame(\n  x = c(x_top, rev(x_bottom)),\n  y = c(y_top, rev(y_bottom)),\n  state = \"paranormal\"\n)\n```\n:::\n\n\n\nOk, now let's use that `tween_states` function from the `tweenr` package to interpolate. This will make for a fun .gif!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninterpolated_data <- tween_states(\n  list(data_normal, data_ghost), \n  nframes = 100,\n  tweenlength = 3,\n  statelength = 1,\n  ease = \"cubic-in-out\"\n)\n```\n:::\n\n\n\nI also want little labels for people who can't tell what we are going for (in case my pun is not wonderfully obvious to everyone!)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninterpolated_data <- interpolated_data |>\n  mutate(label = case_when(\n    .frame < 75 ~ \"normal\",          \n    .frame >= 75 ~ \"paranormal\"  \n  ))\n```\n:::\n\n\n\nAnd EYES! \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neyes_data <- data.frame(\n  x = c(-0.5, 0.5), \n  y = c(0.15, 0.15)\n)\n```\n:::\n\n\n\nAnd now for the plot!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(interpolated_data, aes(x = x, y = y)) +\n  geom_polygon(fill = \"white\", color = \"black\", linewidth = 1.5) +\n  geom_label(aes(label = label), x = 0, y = 0, size = 6, vjust = -1, na.rm = TRUE) +  \n  geom_point(data = eyes_data) +\n  theme_void() +\n  theme(\n    panel.background = element_rect(fill = \"transparent\", color = NA),\n    plot.background = element_rect(fill = \"transparent\", color = NA)\n  ) +\n  transition_time(.frame)\n```\n:::\n\n\n\nAnd finally, let's animate it!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimate(p, duration = 5, fps = 30, width = 500, height = 500, \n        renderer = gifski_renderer(\"ghost_morph.gif\"))\n```\n:::\n\n\n\n![](ghost_morph.gif)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}