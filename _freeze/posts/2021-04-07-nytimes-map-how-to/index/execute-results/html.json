{
  "hash": "b0055c85f4543b90a7ea2a67e701eb7d",
  "result": {
    "markdown": "---\ntitle: \"NYTimes Map How-to\"\nauthor: \"Lucy D'Agostino McGowan\"\ndate: '2021-04-07'\nslug: nytimes-map-how-to\ncategories: [rstats, nytimes, covid-19]\ntags: [rstats, nytimes, covid-19]\ndescription: \"A quick how-to for a neat New York Times visualization, inspired by an IsoStat listserv conversation.\"\n---\n\n\nThere was a recent email thread in the [IsoStat listserv](https://ww2.amstat.org/committees/isostat/isostat.html) about a cool visualization that recently came out in the New York Times showing COVID-19 cases over time. This sparked a discussion about whether this was possible to recreate in R with ggplot, so of course I gave it a try!\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidycensus)\nlibrary(tidyverse)\nlibrary(geofacet)\nlibrary(zoo)\n```\n:::\n\n\nThe plot shows cases per 100,000 by state, so I first needed to pull population data. To do that I used the **tidycensus** package. (If you don't have an API key, you can get one [here](https://api.census.gov/data/key_signup.html))\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncensus_api_key(\"YOUR API KEY\")\n```\n:::\n\n\nI pulled the population by state from 2019.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop <- get_acs(geography = \"state\", variables = \"B01003_001\", year = 2019)\n```\n:::\n\n\nThen I pulled the cases in from the New York Times GitHub repo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncases <- read_csv(\"https://github.com/nytimes/covid-19-data/raw/master/us-states.csv\")\n```\n:::\n\n\n\nThese need to be wrangled a bit:\n\n* The data come in as cumulative cases, and we want cases per day, so I create a new variable `case` for this purpose\n* There is a weirdo data point in Missouri on March 8th (it looks like there were 50,000 cases!) so I just removed that\n* I merged in the state populations that I pulled from the census\n* I created a 7 day rolling average\n* I created a variable for 7 day average per 100,000 people - this is the main variable used in the plot\n* I filtered to the range used in the original visualization - from Februrary 1st to April 4th \n* I merged in state abbreviations to make the plot easier to read\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- cases %>%\n  group_by(state) %>%\n  mutate(case = c(cases[1], diff(cases))) %>%\n  ungroup() %>%\n  filter(!(date == as.Date(\"2021-03-08\") & state == \"Missouri\")) %>% \n  left_join(pop, by = c(\"fips\" = \"GEOID\")) %>%\n  group_by(state) %>%\n  arrange(date) %>%\n  mutate(\n    case_7 = rollmean(case, k = 7, fill = NA),\n    case_per_100 = (case_7 / estimate) * 100000) %>%\n  ungroup() %>%\n  filter(date > as.Date(\"2021-01-31\"), date < as.Date(\"2021-04-05\"))\n\nstates <- tibble(state = state.name,\n                 state_ = state.abb) %>%\n   add_row(state = \"District of Columbia\", state_ = \"DC\")\n\nd <- left_join(d, states, by = \"state\") %>%\n  filter(!is.na(state_))\n```\n:::\n\n\n\nThis plot had a neat feature that it filled in the area from the lowest point onward; to replicate this I found the date with the minimum cases per 100,000 and created a variable `col` to indicate any date after this point.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- d %>% \n  group_by(state) %>%\n  slice_min(case_per_100) %>%\n  slice(1) %>%\n  mutate(min_date = date) %>%\n  select(min_date, state) %>%\n  left_join(d, by = \"state\") %>%\n  mutate(col = ifelse(date >= min_date, \"yes\", \"no\"))\n```\n:::\n\n\nNow time to plot! The x-axis is `date`, the y-axis is `case_per_100` and voila!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(d, aes(x = date, y = case_per_100)) +\n  geom_line(color = \"#BE2D22\") + \n  geom_area(aes(alpha = col), fill = \"#BE2D22\") +\n  scale_alpha_discrete(range = c(0, 0.7)) +\n  facet_geo(~state_) + \n  theme_minimal() +\n  labs(x = \"\", \n       y = \"\",\n       title = \"Cases per 100,000\",\n       subtitle = \"Feb 1 - Apr 4, Red area indicates rise since lowest point of 2021\",\n       caption = \"Note: Shows seven-day average\") +\n  theme(axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank(),\n        legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}